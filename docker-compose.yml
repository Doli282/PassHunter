---
#name: 'passhunter'

services:
  rabbitmq:
    container_name: rabbitmq
    hostname: rabbitmq
    image: docker.io/library/rabbitmq:4-management
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: app_password_main
    volumes:
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - hunter-network
    ports:
      - "5672:5672"
      - "15672:15672"

  forwarder:
    container_name: forwarder
    hostname: forwarder
    build:
      context: ./forwarder
      dockerfile: Dockerfile
    networks:
      - hunter-network
    env_file:
      - ./forwarder/.env


  downloader:
    container_name: downloader
    hostname: downloader
    build:
      context: ./downloader
      dockerfile: Dockerfile
    depends_on:
      - rabbitmq
    networks:
      - hunter-network
    volumes:
      - download_volume:/data
    env_file:
      - ./downloader/.env

  extractor:
    container_name: extractor
    hostname: extractor
    build:
      context: ./extractor
      dockerfile: Dockerfile
    depends_on:
      - rabbitmq
    networks:
      - hunter-network
    volumes:
      - download_volume:/data/downloads
      - upload_volume:/data/uploads

  #  uploader:
  #    container_name: uploader
  #    hostname: uploader
  #    build: ./uploader
  #    depends_on:
  #      - rabbitmq
  #    networks:
  #      - hunter-network
  #    volumes:
  #      - upload_volume:/data
  #    env_file:
  #      - ./uploader/.env
  #    environment:
  #      CELERY_BROKER_URL: amqp://app_user:app_pass@rabbitmq:5672/uploads_vhost

  web:
    container_name: web
    hostname: web
    build:
      context: .
      dockerfile: passhunter/Dockerfile
    networks:
      - hunter-network
    ports:
      - "5000:5000"
    env_file:
      - ./passhunter/.env
    depends_on:
      db:
        condition: service_healthy

  db:
    container_name: db
    hostname: db
    image: docker.io/library/postgres:17
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      #- ./postgres/data:/var/lib/postgresql/data/
    networks:
      - hunter-network
    env_file:
      - ./postgres/.env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} -t 1" ]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 5s

  opensearch:
    container_name: opensearch
    hostname: opensearch
    build:
      context: opensearch
      dockerfile: Dockerfile
    environment:
      - node.name=opensearch
      - discovery.type=single-node
      - bootstrap.memory_lock=true # along with the memlock settings below, disables swapping
      - OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m # minimum and maximum Java heap size, recommend setting both to 50% of system RAM
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=${OPENSEARCH_ADMIN_PASSWORD} # Sets the demo admin user password when using demo configuration, required for OpenSearch 2.12 and higher
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536 # maximum number of open files for the OpenSearch user, set to at least 65536 on modern systems
        hard: 65536
    ports:
      - "9200:9200"
    volumes:
      - opensearch_data:/usr/share/opensearch/data
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -k https://localhost:9200/_cluster/health -u admin:${OPENSEARCH_ADMIN_PASSWORD} || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 10

volumes:
  postgres_data:
  download_volume:
  upload_volume:
  opensearch_data:

networks:
  hunter-network:
    driver: bridge

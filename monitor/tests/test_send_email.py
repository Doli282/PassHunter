# Generated by PyCharm IDE though the function "Generate Unit Test" for send_email() function

import unittest
from unittest.mock import patch, MagicMock

from monitor import send_email


@patch("monitor.smtplib.SMTP_SSL")
@patch("monitor.os.getenv")
@patch("monitor.logging")
class TestSendEmail(unittest.TestCase):
    @patch("monitor.Config")
    def test_send_email_success(self, mock_config, mock_logging, mock_getenv, mock_smtp):
        """
        Test case for successful email sending.
        Mocks SMTP_SSL, os.getenv, and logging to ensure the function runs without making real SMTP calls.
        """
        mock_smtp_instance = MagicMock()  # Mock the SMTP SSL instance
        mock_smtp.return_value.__enter__.return_value = mock_smtp_instance  # Mock return value for SMTP_SSL
        # Mock environment variables for email sender
        mock_getenv.side_effect = lambda key: {
            "EMAIL_SENDER": "test_sender@example.com"
        }.get(key)
        mock_config.SMTP_USERNAME = "test_username"
        mock_config.SMTP_PASSWORD = "test_password"

        # Call send_email function with valid parameters
        send_email(
            receiver_address="receiver@example.com",
            domain_name="example.com",
            watchlist_name="Test Watchlist",
            detected_at="2023-10-12 10:00:00"
        )

        # Assert logging was called with the correct log message
        mock_logging.info.assert_called_once_with(
            "Sending alert for domain 'example.com' and watchlist 'Test Watchlist' to 'receiver@example.com'"
        )
        # Check if SMTP login and sending the email were called
        mock_smtp_instance.login.assert_called_once_with("test_username", "test_password")
        mock_smtp_instance.send_message.assert_called_once()

    def test_send_email_failure(self, mock_logging, mock_getenv, mock_smtp):
        """
        Test case for handling SMTP errors during email sending.
        """
        mock_smtp.side_effect = Exception("SMTP error")  # Simulate an SMTP error
        # Mock environment variables for email sender
        mock_getenv.side_effect = lambda key: {
            "EMAIL_SENDER": "test_sender@example.com"
        }.get(key)

        # Send email and expect an exception to be raised
        with self.assertRaises(Exception) as context:
            send_email(
                receiver_address="receiver@example.com",
                domain_name="example.com",
                watchlist_name="Test Watchlist",
                detected_at="2023-10-12 10:00:00"
            )

        # Assert exception message matches
        self.assertEqual(str(context.exception), "SMTP error")
        # Assert logging was called
        mock_logging.info.assert_called_once()

if __name__ == "__main__":
    unittest.main()  # Run the test cases

# Generated by PyCharm IDE using the Generate Unit Tests feature

import unittest
from unittest.mock import patch, MagicMock

from monitor import upload_bulk


@patch("monitor.check_hash_in_db")
@patch("monitor.create_file")
@patch("monitor.get_opensearch")
@patch("monitor.os.listdir")
@patch("monitor.os.path.join")
@patch("monitor.open", create=True)
@patch("monitor.upload_bulk_helper")
class TestUploadBulk(unittest.TestCase):

    def setUp(self):
        self.directory_path = "/test/path"
        self.upload_time = "2023-11-01T12:00:00Z"

    def test_upload_bulk_no_files(self, mock_upload_helper, mock_open, mock_join, mock_listdir, mock_get_opensearch,
                                  mock_create_file, mock_check_hash):
        """
        Test case for when the folder has no files (empty directory).
        """
        mock_listdir.return_value = []

        upload_bulk(self.directory_path, self.upload_time)

        mock_listdir.assert_called_once_with(self.directory_path)
        mock_upload_helper.assert_called_once_with([], 0)

    def test_upload_bulk_single_file_success(self, mock_upload_helper, mock_open, mock_join, mock_listdir,
                                             mock_get_opensearch, mock_create_file, mock_check_hash):
        """
        Test case for successfully uploading a single file.
        """
        mock_listdir.return_value = ["file1.txt"]
        mock_join.return_value = "/test/path/file1.txt"
        mock_check_hash.return_value = (False, b"digest1")
        mock_file = MagicMock()
        mock_file.__enter__.return_value.read.return_value = b"file_content"
        mock_open.return_value = mock_file
        mock_opensearch_client = MagicMock()
        mock_get_opensearch.return_value = mock_opensearch_client

        upload_bulk(self.directory_path, self.upload_time)

        mock_listdir.assert_called_once_with(self.directory_path)
        mock_join.assert_called_with(self.directory_path, "file1.txt")
        mock_check_hash.assert_called_once_with("/test/path/file1.txt")
        mock_open.assert_called_once_with("/test/path/file1.txt", "rb")
        mock_create_file.assert_called_once_with("file1.txt", b"digest1")
        mock_opensearch_client.prepare_bulk_upload.assert_called_once()
        mock_upload_helper.assert_called_once_with([mock_opensearch_client.prepare_bulk_upload.return_value], 1)

    def test_upload_bulk_existing_file_in_db(self, mock_upload_helper, mock_open, mock_join, mock_listdir,
                                             mock_get_opensearch, mock_create_file, mock_check_hash):
        """
        Test case for skipping a file that already exists in the database.
        """
        mock_listdir.return_value = ["file1.txt"]
        mock_join.return_value = "/test/path/file1.txt"
        mock_check_hash.return_value = (True, b"digest1")

        upload_bulk(self.directory_path, self.upload_time)

        mock_listdir.assert_called_once_with(self.directory_path)
        mock_check_hash.assert_called_once_with("/test/path/file1.txt")
        mock_create_file.assert_not_called()
        mock_open.assert_not_called()
        mock_upload_helper.assert_called_once()

    def test_upload_bulk_error_during_processing(self, mock_upload_helper, mock_open, mock_join, mock_listdir,
                                                 mock_get_opensearch, mock_create_file, mock_check_hash):
        """
        Test case for handling errors raised when processing files.
        """
        mock_listdir.return_value = ["file1.txt"]
        mock_join.return_value = "/test/path/file1.txt"
        mock_check_hash.side_effect = Exception("Test error")

        upload_bulk(self.directory_path, self.upload_time)

        mock_listdir.assert_called_once_with(self.directory_path)
        mock_check_hash.assert_called_once_with("/test/path/file1.txt")
        mock_create_file.assert_not_called()
        mock_open.assert_not_called()
        mock_upload_helper.assert_called_once_with([], 1) # no actions but one file was processed

    def test_upload_bulk_multiple_batches(self, mock_upload_helper, mock_open, mock_join, mock_listdir,
                                          mock_get_opensearch, mock_create_file, mock_check_hash):
        """
        Test case for uploading multiple files in batch (e.g., 50 files).
        """
        mock_listdir.return_value = [f"file{i}.txt" for i in range(50)]
        mock_join.side_effect = lambda directory, file: f"{directory}/{file}"
        mock_check_hash.side_effect = lambda file: (False, file.encode())
        mock_file = MagicMock()
        mock_file.__enter__.return_value.read.return_value = b"file_content"
        mock_open.return_value = mock_file
        mock_opensearch_client = MagicMock()
        mock_get_opensearch.return_value = mock_opensearch_client

        upload_bulk(self.directory_path, self.upload_time)

        mock_listdir.assert_called_once_with(self.directory_path)
        self.assertEqual(mock_check_hash.call_count, 50)
        self.assertEqual(mock_create_file.call_count, 50)
        self.assertEqual(mock_upload_helper.call_count, 2+1)  # Two batches: 25 + 25 + 1 at the end
        mock_open.assert_called()

if __name__ == "__main__":
    unittest.main()
# Generated by PyCharm IDE using the Generate Unit Tests feature

import unittest
from unittest.mock import patch, mock_open, MagicMock

from monitor import upload_file

@patch("monitor.get_opensearch")
@patch("builtins.open", new_callable=mock_open, read_data=b"example file content")
class TestUploadFile(unittest.TestCase):

    def setUp(self):
        # Common setup for tests
        self.file_path = "test_file.txt"
        self.result = "ZXhhbXBsZSBmaWxlIGNvbnRlbnQ="
        self.upload_time = "2025-01-01T12:00:00Z"
        self.mock_opensearch = MagicMock()

    def test_upload_file_successful_upload(self, mock_open, mock_get_opensearch):
        """
        Test upload_file function for a successful file upload to OpenSearch.
        """
        mock_get_opensearch.return_value = self.mock_opensearch

        result = upload_file(self.file_path, self.upload_time)

        mock_open.assert_called_once_with(self.file_path, "rb")
        self.mock_opensearch.upload_file.assert_called_once_with(
            self.result,
            self.file_path,
            self.upload_time
        )
        self.assertTrue(result)

    def test_upload_file_read_failure(self, mock_open, mock_get_opensearch):
        """
        Test upload_file function when file read fails and encoded data is empty.
        """
        mock_open.side_effect = FileNotFoundError

        with self.assertRaises(FileNotFoundError):
            upload_file(self.file_path, self.upload_time)

        mock_open.assert_called_once_with(self.file_path, "rb")
        mock_get_opensearch.assert_not_called()

    def test_upload_file_opensearch_failure(self, mock_open, mock_get_opensearch):
        """
        Test upload_file function when there is an exception during upload to OpenSearch.
        """
        mock_get_opensearch.return_value = self.mock_opensearch
        self.mock_opensearch.upload_file.side_effect = Exception("Mocked exception")

        result = upload_file(self.file_path, self.upload_time)

        mock_open.assert_called_once_with(self.file_path, "rb")
        self.mock_opensearch.upload_file.assert_called_once_with(
            self.result,
            self.file_path,
            self.upload_time
        )
        self.assertFalse(result)

"""basic tables

Revision ID: 5ecd2ada1b39
Revises: 
Create Date: 2025-04-18 17:36:33.476664

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '5ecd2ada1b39'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('domain',
    sa.Column('id', sa.Integer(), nullable=False, comment='Domain ID'),
    sa.Column('name', sa.String(length=256), nullable=False, comment='Domain name'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    comment='Monitored domains'
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False, comment='User ID'),
    sa.Column('email', sa.String(length=256), nullable=False, comment='Email address of the user'),
    sa.Column('name', sa.String(length=256), nullable=True, comment="User's name"),
    sa.Column('password_hash', sa.String(length=256), nullable=False, comment='Password hash'),
    sa.PrimaryKeyConstraint('id'),
    comment='Registered users'
    )
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_email'), ['email'], unique=True)

    op.create_table('watchlist',
    sa.Column('id', sa.Integer(), nullable=False, comment='Watchlist ID'),
    sa.Column('user_id', sa.Integer(), nullable=False, comment='User ID'),
    sa.Column('name', sa.String(length=256), nullable=False, comment='Watchlist name'),
    sa.Column('description', sa.Text(), nullable=True, comment='Watchlist description'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether the watchlist is active or not'),
    sa.Column('email', sa.String(length=256), nullable=True, comment='Email address to send alerts to'),
    sa.Column('send_alerts', sa.Boolean(), nullable=False, comment='Whether to send email alerts for this watchlist'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id', 'user_id'),
    sa.UniqueConstraint('name'),
    comment='Watchlists are used to group monitored domains'
    )
    op.create_table('alert',
    sa.Column('id', sa.Integer(), nullable=False, comment='Alert ID'),
    sa.Column('is_new', sa.Boolean(), nullable=False, comment='Whether the alert is new or not'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Date and time the alert was created'),
    sa.Column('domain_id', sa.Integer(), nullable=False, comment='Domain ID for which the alert was raised'),
    sa.Column('watchlist_id', sa.Integer(), nullable=False, comment='Watchlist ID for which the alert was raised'),
    sa.ForeignKeyConstraint(['domain_id'], ['domain.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['watchlist_id'], ['watchlist.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    comment='Alerts are raised for specific domains'
    )
    with op.batch_alter_table('alert', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_alert_domain_id'), ['domain_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_alert_watchlist_id'), ['watchlist_id'], unique=False)

    op.create_table('watchlist_domain_association',
    sa.Column('watchlist_id', sa.Integer(), nullable=False),
    sa.Column('domain_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['domain_id'], ['domain.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['watchlist_id'], ['watchlist.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('watchlist_id', 'domain_id'),
    sa.UniqueConstraint('watchlist_id', 'domain_id', name='uq_watchlist_domain')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('watchlist_domain_association')
    with op.batch_alter_table('alert', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_alert_watchlist_id'))
        batch_op.drop_index(batch_op.f('ix_alert_domain_id'))

    op.drop_table('alert')
    op.drop_table('watchlist')
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_email'))

    op.drop_table('user')
    op.drop_table('domain')
    # ### end Alembic commands ###
